{"ast":null,"code":"export class GeneratorsService {\n  constructor() {\n    this.generators = [];\n    this.flapc = [];\n    this.priority_list = [];\n    this.loads = [];\n    this.fromfile = false;\n    this.dps = [];\n  }\n\n  addGenerator() {\n    this.generators.push({\n      A_parameter: 0,\n      B_parameter: 0,\n      C_parameter: 0,\n      Pmin: 0,\n      Pmax: 0,\n      F: 0\n    });\n    this.flapc.push({\n      value: 0,\n      index: 0\n    });\n  }\n\n  updateIndLoad(id, Load) {\n    this.loads[id] = Load;\n  }\n\n  updateLoad(loads) {\n    if (!this.fromfile) {\n      this.loads = loads;\n    }\n  }\n\n  updateGenerator(id, A_parameter, B_parameter, C_parameter, Pmin, Pmax, F) {\n    this.generators[id].A_parameter = A_parameter;\n    this.generators[id].B_parameter = B_parameter;\n    this.generators[id].C_parameter = C_parameter;\n    this.generators[id].Pmin = Pmin;\n    this.generators[id].Pmax = Pmax;\n    this.generators[id].F = F;\n    this.calculateFlapc(id);\n  }\n\n  calculateFlapc(id) {\n    this.flapc[id].value = (this.generators[id].A_parameter + this.generators[id].B_parameter * this.generators[id].Pmax + this.generators[id].C_parameter * this.generators[id].Pmax ** 2) * this.generators[id].F / this.generators[id].Pmax;\n    this.flapc[id].index = id;\n  }\n\n  calculate() {\n    this.flapc.sort(function (a, b) {\n      return a.value - b.value;\n    });\n\n    for (let i = 0; i < this.generators.length; i++) {\n      this.generateRandomData(this.generators[i]);\n      let llist = [];\n      let j = this.generators.length - i;\n\n      while (j) {\n        llist.push(this.flapc[j - 1]);\n        j--;\n      }\n\n      this.priority_list.push(llist);\n    }\n  }\n\n  generateRandomData(generator) {\n    let temp = [];\n\n    for (let i = generator.Pmin; i <= generator.Pmax; i++) {\n      let y = generator.A_parameter + generator.B_parameter * i + generator.C_parameter * i * i;\n      temp.push({\n        x: i,\n        y: y\n      });\n    }\n\n    this.dps.push(temp);\n  }\n\n  get_dps(id) {\n    return this.dps[id];\n  }\n\n  get_generator() {\n    return this.generators;\n  }\n\n  get_list() {\n    return this.priority_list;\n  }\n\n  get_load() {\n    return this.loads;\n  }\n\n  get_flapc() {\n    return this.flapc;\n  }\n\n  getInitialvalue(fileInput) {\n    let Input_param = fileInput.split(/\\r?\\n/);\n    let Initial_value = Input_param[0].split(',');\n    let Load_string = Input_param[1].split(',');\n\n    for (let i = 0; i < Load_string.length; i++) {\n      this.loads.push(Number(Load_string[i]));\n    }\n\n    this.fromfile = true;\n    return Number(Initial_value[0]);\n  }\n\n  readInputfile(fileInput) {\n    let gen_param = fileInput.split(/\\r?\\n/);\n    console.log(fileInput);\n    console.log(this.generators);\n    console.log(this.loads);\n\n    for (let i = 2; i < gen_param.length; i++) {\n      let values = gen_param[i].split(',');\n      this.updateGenerator(i - 2, Number(values[0]), Number(values[1]), Number(values[2]), Number(values[4]), Number(values[5]), Number(values[3]));\n    }\n\n    console.log(this.generators);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}